# Discord Bot Token for authentication
# You can get your bot token by creating a bot on the Discord Developer Portal:
# https://discord.com/developers/applications
# The bot token is used to authenticate and interact with Discordâ€™s API.
DISCORD_TOKEN=""

# Client ID of the Discord bot (usually the application or bot's ID)
# You can find your client ID in the Discord Developer Portal under your bot's settings.
# This ID is used to identify your bot when interacting with Discord services.
CLIENT_I=""

# URI for MongoDB connection (database connection)
# You can get the MongoDB URI by creating a cluster on MongoDB Atlas:
# https://www.mongodb.com/cloud/atlas
# After creating a cluster, you'll get the connection string under your cluster's connection settings.
# This URI allows your bot to connect to your MongoDB database for storing data.
MONGODB_URI=""

# Defines the total number of shards used by the bot. "auto" will automatically adjust based on the bot's needs.
# Sharding is used to split the bot's activity across multiple processes to distribute load.
# For large bots with many servers, this helps reduce latency and improves performance.
TOTAL_SHARDS="auto"

# Number of shards per cluster. Number of processes per cluster.
# A "shard" is a single process handling a subset of servers for the bot.
# Increasing this value can improve performance by spreading the load over more processes.
SHARDS_PER_CLUSTER=4

# Sharding mode being used. Can be "process" or "worker".
# "process" means each shard runs in its own process, while "worker" uses worker threads.
# Worker threads are more lightweight but may not be as reliable as separate processes in some scenarios.
SHARDING_MODE="process"

# Log level for logging.
# Level 0 for all logs, Level 1 for all except debug, Level 2 for all except info, and so on until Level 5 for errors only.
# This controls which types of logs will be printed. Lower levels print more detailed logs.
LOG_LEVEL=0

# Prefix used in the log messages, e.g. "INFO-LOG" or a custom prefix.
# This prefix is added to the log message to categorize the log output (e.g., for debugging or error logs).
LOG_PREFIX="INFO-LOG"

# Determines whether to include a timestamp in the logs or not.
# If "true", logs will include the time they were logged. This helps track events in chronological order.
LOG_TIMESTAMP="true"

# Discord Webhook URL for sending logs. If empty, logs will not be sent to the webhook.
# Webhooks allow you to send real-time messages to a Discord channel. It can be used to send logs to a specific channel.
# To create a webhook, follow these steps:
# 1. Go to the Discord channel where you want to send logs.
# 2. Click on the settings of the channel, go to "Integrations" and click "Create Webhook".
# 3. Copy the webhook URL and paste it here.
LOG_WEBHOOK=""

# Determines whether the bot's slash commands will be publicly published.
# If "true", slash commands will be available to all public servers. If "false", only development servers will have access.
# Slash commands are a feature in Discord that allows bots to offer commands in a structured way.
# Public slash commands are visible to all servers your bot is in, while private slash commands are only available to specific servers.
PUBLIC_SLASH="true"

# If you want to limit slash commands to a specific guild (development server), enter the guild ID here.
# Remove this line if you want to publish the slash commands globally.
# You can find the Guild ID by enabling Developer Mode in Discord (User Settings > Advanced > Developer Mode).
# Right-click on your server's name and click "Copy ID".
# This is useful for testing commands before making them available to everyone.
DEV_GUILD=""  # Leave this empty if you want to publish globally

# List of Discord user IDs for the bot developers.
# Use a comma-separated list to specify multiple developers.
# These IDs will be used to identify privileged users with special access to bot commands or features.
# Example: DEVELOPERS=1234567890,0987654321,1122334455
DEVELOPERS=""
